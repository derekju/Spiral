<!DOCTYPE html>
<html>
<head>
    <style type="text/css">
    body {
        font-family: Courier;
    }
    </style>    
</head>
<body>
<script type="text/javascript">

function Spiral(n, m) {
    this.rowLen = n;
    this.colLen = m;
    this.matrix = createMatrix(n, m);

    var row = 0,
        col = 0,
        success = true,
        direction = 0,
        DIRECTION_TUPLES = [[0,1], [1,0], [0,-1], [-1,0]];

    /**
     * Generate a blank matrix
     */
    function createMatrix(n, m) {
        var matrix = [];
        for (var i = 0; i < n; i++) {
            matrix[i] = [];
            for (var j = 0; j < m; j++) {
                matrix[i][j] = "";
            }
        }
        return matrix;
    }

    /**
     * Change the current direction
     */
    function changeDirection() {
        direction === 3 ? direction = 0 : direction++;
    }

    /**
     * Check if the next move is valid
     */
    function canMove(matrix, rowLength, colLength) {
        var rowTranslation = DIRECTION_TUPLES[direction][0],
            colTranslation = DIRECTION_TUPLES[direction][1];
        // Bounds check
        if (col + colTranslation === colLength || col + colTranslation < 0) {
            return false;
        }
        else if (row + rowTranslation === rowLength || row + rowTranslation < 0) {
            return false;
        }
        // Duplicate check
        else if (matrix[row + rowTranslation][col + colTranslation] == "X") {
            return false;
        }        
        else {
            // Gap check in the same direction
            try {
                if (matrix[row + rowTranslation + rowTranslation][col + colTranslation + colTranslation] == "X") {
                    return false;
                }
            } catch (e) { }
            // Gap checks in all directions
            var addlTuples = [];
            switch (direction) {
                // Right is ok, check right up and right down
                // Left is ok, check left up and left down
                case 0:
                case 2:
                    addlTuples = [1, 3];
                    break;
                // Down is ok, check down left, and down right
                // Up is ok, check up left, and up right
                case 1:
                case 3:
                    addlTuples = [0, 2];
                    break;
            }
            for (var i = 0; i < addlTuples.length; i++) {
                var tupleRowTrans = DIRECTION_TUPLES[addlTuples[i]][0];
                var tupleColTrans = DIRECTION_TUPLES[addlTuples[i]][1];
                try {
                    if (matrix[row + rowTranslation + tupleRowTrans][col + colTranslation + tupleColTrans] == "X") {
                        return false;
                    }
                } catch (e) { }
            }

        }
        return true;
    }

    /**
     * Execute a move for the next position
     */
    function move(matrix) {
        var rowTranslation = DIRECTION_TUPLES[direction][0],
            colTranslation = DIRECTION_TUPLES[direction][1];
        row += rowTranslation;
        col += colTranslation;        
        matrix[row][col] = 'X';
    }

    /**
     * Make the initial move
     */
    function firstMove(matrix) {
        matrix[row][col] = 'X';
    }

    firstMove(this.matrix);
    while (success) {
        var moved = false;
        while (canMove(this.matrix, this.rowLen, this.colLen)) {
            move(this.matrix);
            moved = true;
        }
        // If no valid move was possible, we are done
        if (!moved) {
            success = false;
        } else {
            changeDirection();
        }
    }
}

/**
 * Print the spiral out
 */
Spiral.prototype.print = function () {
    for (var i = 0; i < this.rowLen; i++) {
        for (var j = 0; j < this.colLen; j++) {
            if (this.matrix[i][j] === "") document.write("-")
            else document.write(this.matrix[i][j]);
        }
        document.write('<br>');
    }
}

var s = new Spiral(11,11);
s.print();

</script>
</body>
</html>